== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/00-notes ==
Wenn wir mit Computerdateien arbeiten, müssen wir oft
bestimmte Dateien umbenennen, während andere unverändert bleiben.
=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/01-notes ==
Heute möchte ich eine Technik demonstrieren, die ich
auf stackflow.com gefunden habe. Ich komme aus der Informatik,
daher kenne ich mich mit Linux am besten aus und werde daher
mit einem Find-Befehl demonstrieren. Da Microsoft jedoch
Powershell entwickelt hat,
das vieles von dem macht, was dieses Skript macht,
ist diese Technik möglicherweise auch mit dieser Technologie möglich.

=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/02-notes ==
find ist ein Linux-Befehl, der einen Ordner und seine
untergeordneten Verzeichnisse rekursiv nach einem Zeichenfolgenmuster durchsucht. Dies ist eine bevorzugte
Suchmethode, da es sich dabei um eine Thread-Ausführung der Suche zu handeln scheint.

=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/03-notes ==
Threading ist einfach eine raffinierte Art, ein Programm
gleichzeitig auszuführen, oder einfach ausgedrückt führen wir ein Stück Programmierung
wiederholt mit einer Stoppbedingung aus. Da es im heutigen Video nicht
um Threading geht, können wir diese vereinfachte Definition verwenden.
=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/04-notes ==
Da es sich bei „find“ um einen rekursiven Befehl handelt, muss darauf geachtet werden, dass nur die gewünschten Ordner durchsucht werden. Daher wäre es beispielsweise unklug, diese Technik auf das gesamte Dateisystem anzuwenden.
=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/05-notes ==
Gehen wir also dieses einfache Skript durch:
=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/06-notes ==
Die erste Zeile „#!/usr/bin/env bash“ sieht im Vergleich zum herkömmlichen „#!/usr/bin/bash“ zunächst vielleicht seltsam aus. Das traditionelle Sha Bang geht davon aus, dass das Bash-Programm dort ist, wo es sein sollte.
Diese Zeile im Skript geht nicht von dieser Annahme aus, sondern besagt, dass das Bash-Programm irgendwo im
$PATH ist.
=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/07-notes ==
function rename()

Um einen wiederverwendbaren Befehl oder Codeabschnitt zu erstellen, erstellen wir Funktionen. So wird eine
Skriptfunktion geschrieben. Beim Shell-Skripting funktionieren Funktionen anders als beim
normalen Programmieren. Eine Funktion gibt, wie der Name schon sagt, einen Wert zurück. Beim Skripting verhalten sich Funktionen jedoch
eher wie Unterprogramme, da sie eigentlich nichts zurückgeben.

Weitere Unterschiede sind darin zu erkennen, wie Werte an die Funktion übergeben werden. Beim Programmieren neigen wir dazu,
Parameter in der Nähe des Funktionsnamens aufzulisten, aber wir werden bald sehen, dass Parameter implizit statt explizit sind.
=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/08-notes ==
local old=$1
local new=$2

Jetzt ist vielleicht ein guter Zeitpunkt, um kurz über Funktions- und globale Variablen zu sprechen. Funktionsvariablen
sollten nur innerhalb der Funktion verwendet werden können, in der sie definiert wurden. Damit Code wiederverwendbar ist
sollten Funktionen atomar sein; sie sollten eigenständig funktionieren können.

Im Sinne der Autonomie sehen wir also die erste Instanz im Schlüsselwort „local“; wir möchten nur, dass diese
Variablen innerhalb der Funktion zugänglich sind. Ohne dieses Schlüsselwort könnten wir auf die Werte dieser Variablen zugreifen und
möglicherweise ändern, wodurch Fehler schwerer zu finden wären.

Wenn wir in Shell-Skripten „$“ sehen, nehmen wir an, dass es sich um Variablen handelt, die Zahlen können jedoch ungerade sein.

Bei Skripten verweisen wir auf Parameter nach Position, nicht nach Namen, daher bedeutet $1 den ersten übergebenen Parameter.
Die Zählung der Parameterplatzierungen beginnt bei 1, nicht bei 0.
=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/09-notes ==
find

In der nächsten Zeile sehen wir den eigentlichen Befehl. find wurde bereits identifiziert, aber um es noch einmal zu wiederholen:
Dies ist ein Programm, das Threads verwendet, um rekursiv nach einem String oder einem wörtlichen Muster zu suchen.
=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/10-notes ==
find .

Nach dem Find-Programm sehen wir Argumente, die an das Programm übergeben werden. Argumente oder manchmal auch Flags genannt, werden in der Programmierung verwendet, um Programmen Anleitungen zur Ausführung bestimmter Funktionen zu geben.

Hier ist unser erstes Argument ein Punkt, der in diesem Kontext bedeutet, dass die Suche im aktuellen
Verzeichnis oder Ordner gestartet wird, wenn Sie das bevorzugen. Dieser Punkt kann so geändert werden, dass er auf ein beliebiges Verzeichnis verweist. Ein Tipp: Verwenden Sie immer vollständige oder absolute Pfade. Für den Befehl „find“ ist es eigentlich egal, ob Sie absolute oder relative Pfade verwenden, aber wenn Sie eine große Skriptdatei verwenden, ist sie einfach besser lesbar. =====
== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/11-notes == find . -type f

Als Nächstes sehen wir -type f, was bedeutet, dass nur nach Dateien gesucht wird. Wir können jedoch auch nach Ordnern suchen, indem wir -type d eingeben. =====
== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/12-notes == find . -type f -name „*${old}“

Wie Sie sich erinnern, haben wir erwähnt, dass find ein Befehl ist, der rekursiv nach einem Zeichenfolgenmuster sucht. Warum sagen wir „Zeichenfolgenmuster“ und nicht einfach „Zeichenfolge“? Gute Frage, ein Muster
schlagen vor, dass wir nicht nach einer exakten Übereinstimmung, sondern nach einer teilweisen Übereinstimmung suchen. Eine teilweise Übereinstimmung, wie durch * angezeigt, bedeutet einfach alles, was mit der Zeichenfolge endet, in diesem Fall $old. Dies führt zu einem anderen Konzept, das reguläre Ausdrücke genannt wird, aber dies liegt außerhalb des Rahmens dieses Videos.
=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/13-notes ==
find . -type f -name "*${old}" -execdir

Hier finden wir die Leistung dieses Befehls mit dem Flag -execdir.
=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/14-notes ==
find . -type f -name "*${old}" -execdir sh -c

Execdir ist nicht nur ein Flag, sondern auch ein eigenständiger Befehl. Das heißt, sh -c sind Argumente für
-execdir, die ihm sagen, welche Shell ausgeführt werden soll. Ironischerweise ist sh die Borne-Shell, während dem Skript gesagt wird, dass es bash verwenden soll: #!/usr/bin/env bash.
Wie ist das möglich?

1. Borne ist in den meisten Linux-Distributionen installiert, aber bash ist hauptsächlich nur für Debian. Nicht alle
Linux-Systeme sind gleich, dieses Thema der Distributionen und Shells geht über den Rahmen dieses Videos hinaus.

2. mv-, echo- und sed-Befehle sind sowohl in Borne- als auch in Bash-Shells enthalten. Beide Shells können diese Befehle lesen und
ausführen.

-c ist ein Shell-Flag borne\bash, das ihm sagt, dass die folgende Zeichenfolge ausgeführt werden soll, als ob sie eingegeben worden wäre.

=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/15-notes ==
find . -type f -name "*${old}" -execdir sh -c \

Ein netter Trick, den ich beim Schreiben von Docker-Dateien gelernt habe, ist der Backslash. Damit können Sie besser lesbaren Code schreiben, der besagt, dass wir eine einzeilige ausführbare Datei schreiben, aber es wird mehrere Zeilen geben.

=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/16-notes ==
find . -type f -name "*${old}" -execdir sh -c \
'x={};'
Hier erfassen und weisen wir die Ergebnisse des Find-Befehls zu, die dem Zeichenfolgenmuster aus der rekursiven Suche des aktuellen Verzeichnisses nur nach Dateien entsprechen.

=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/17-notes ==
find . -type f -name "*${old}" -execdir sh -c \
'x={}; mv $x'
Wir verwenden die erfassten Ergebnisse als Variable im mv-Befehl. Der mv-Befehl in Linux hat zwei Verwendungszwecke:
erstens, um den Dateizeiger tatsächlich von einem Verzeichnis in ein anderes zu verschieben, und zweitens, um
Datei/Verzeichnis umzubenennen, was wir hier tun.
Da dies jedoch nur die Hälfte des Befehls ist, benötigen wir noch einen Namen, um diese Datei umzubenennen.

=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/18-notes ==
find . -type f -name "*${old}" -execdir sh -c \
'x={}; mv $x $(echo $x | sed 's/${old}/${new}/g')'

Um einen neuen Namen zu erhalten, müssen wir eine Sub-Shell verwenden, was einfach bedeutet, dass wir Linux-Befehle verwenden, um
eine einzelne Zeichenfolge auszugeben, die in einen Verschiebebefehl eingesetzt wird. Es gibt mindestens zwei Möglichkeiten,
die Ergebnisse eines Befehls (oder mehrerer Befehle) zuzuweisen. Wir haben bereits eine Möglichkeit gesehen,
über eine benutzerdefinierte Variable: x={}.

Die zweite Möglichkeit, die Ergebnisse zu verwenden, besteht in der Verwendung einer Sub-Shell: $(echo $x | sed 's/${old}/${new}/g').
Diese Sub-Shell verwendet 2 Befehle, die die Ausgabe des ersten Befehls als Eingabe an den zweiten „weiterleiten“,
das Ergebnis ist eine einzelne Zeichenfolge.

=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/19-notes ==
find . -type f -name "*${old}" -execdir sh -c \
'x={}; mv $x $(echo $x | sed 's/${old}/${new}/g')'

echo druckt einfach den Wert aus, der von x gehalten wird.
Von den Ergebnissen dieses Befehls leiten wir die Zeichenfolge an den sed-Befehl weiter.
In Linux-Skripten wird sed normalerweise mit Dateien verwendet, aber in Wirklichkeit kann sed sowohl mit Dateien als auch mit Zeichenfolgen verwendet werden. Mit den Ergebnissen des ersten Befehls können wir die Zeichenfolge manipulieren.
Dieser sed-Befehl ersetzt alle Vorkommen von Java durch Groovy. Ein paar Punkte hier: sed verwendet den
oben erwähnten regulären Ausdruck zwischen '/'. Wenn Sie also ein Zeichenfolgenmuster anstelle einer
einzelnen Zeichenfolge benötigen, achten Sie darauf, reguläre Ausdrücke mit Sonderzeichen zu maskieren. Ein weiterer Punkt: Seien Sie vorsichtig mit
Zeichenfolgen, die '/' enthalten, auch diese müssen maskiert werden.

=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/20-notes ==
find . -type f -name "*${old}" -execdir sh -c \
'x={}; mv $x $(echo $x | sed 's/${old}/${new}/g')' \;
Schließlich erreichen wir das Ende unseres Find-Befehls \;. Wie wir gesehen haben, arbeitet Find rekursiv, daher ist \;
die Abbruchbedingung.

=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/21-notes ==
while getopts ":ud" opts; do
...
done

Zurück zu den SOLID-Prinzipien können wir Flags für die Skriptdatei selbst definieren. Wenn
man mit Programmierung vertraut ist, gilt „while“ als flussgesteuerter Operator; der Rest von uns
wird verstehen, dass er sich wiederholt, bis eine Bedingung erfüllt ist. Die Bedingung(en) für „while“ ist
entweder „u“ oder „d“. getopts steht für „get options“ (Optionen abrufen), vermutlich aus dem Dateiaufruf, und weist
einer Variablen „opts“ zu.
=====

== /home/oem/git/youtube/youtube-linux-cmd-find-rename-file/en/22-notes ==
while getopts „:ud“ opts; do
case $opts in
u)
rename „java“ „groovy“ ;;
d)
rename „groovy“ „java“ ;;
esac
done

case funktioniert genauso wie in den meisten Programmiersprachen, basierend
für die übergebene Option rufen wir die gleiche
Funktion auf.
=====